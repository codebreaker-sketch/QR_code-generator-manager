@* 


@page "/view"
@using qr_website.Services
@using qr_website.Models
@inject QRCodeService QRService
@inject ThemeService ThemeService
@inject IJSRuntime JS

<h3>Stored QR Codes</h3>

<div class="row mb-3">
    <div class="col-md-6">
        <input placeholder="Search by name or ID"
               @bind="searchTerm"
               @bind:event="oninput"
               class="form-control"
               style="background-color: var(--card-bg); color: var(--text-color); border-color: var(--border-color);" />
    </div>
    <div class="col-md-4">
        <select class="form-select"
                @bind="selectedType"
                @bind:event="onchange"
                style="background-color: var(--card-bg); color: var(--text-color); border-color: var(--border-color);">
            <option value="">All Categories</option>
            @foreach (var type in Enum.GetValues<QRCodeType>())
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-secondary w-100" @onclick="Search"
                style="background-color: var(--card-bg); color: var(--text-color); border-color: var(--border-color);">
            Search
        </button>
    </div>
</div>

@if (filteredQRCodes.Any())
{
    <div class="mb-3">
        <button class="btn btn-danger" @onclick="DeleteSelectedQRCodes" disabled="@(!selectedIds.Any())">
            Delete Selected
        </button>
    </div>

    <ul class="list-group" style="background-color: var(--card-bg); color: var(--text-color);">
        @foreach (var qr in filteredQRCodes)
        {
            <li class="list-group-item d-flex justify-content-between align-items-start"
                style="background-color: var(--card-bg); color: var(--text-color); border-color: var(--border-color);">
                <div class="ms-2 me-auto">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox"
                               checked="@qr.IsSelected"
                               @onchange="e => OnCheckboxChanged(qr, e)" />
                        <label class="form-check-label">
                            <strong>@qr.Name</strong> (ID: @qr.Id)<br />
                            <em>Category:</em> @qr.Type
                        </label>
                    </div>
                    <img src="data:image/png;base64,@qr.ImageBase64" style="width: 100px;" />
                </div>
                <div class="d-flex flex-column align-items-end">
                    <button class="btn btn-sm btn-success mb-1" @onclick="() => DownloadQRCode(qr)">Download</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteQRCode(qr.Id)">Delete</button>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p style="color: var(--text-color);">No QR codes found.</p>
}

@code {
    private string searchTerm = "";
    private string? _selectedType = "";
    private string? selectedType
    {
        get => _selectedType;
        set
        {
            _selectedType = value;
            Search(); // trigger on change
        }
    }

    private List<QRCodeEntryWithSelection> filteredQRCodes = new();
    private HashSet<Guid> selectedIds = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadQRCodes();
    }

    private async Task LoadQRCodes()
    {
        var all = await QRService.GetAll();
        filteredQRCodes = all.Select(q => new QRCodeEntryWithSelection(q)).ToList();
    }

    private async Task Search()
    {
        var all = await QRService.GetAll();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            all = all.Where(q =>
                q.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                q.Id.ToString().Contains(searchTerm));
        }

        if (!string.IsNullOrWhiteSpace(selectedType) &&
            Enum.TryParse<QRCodeType>(selectedType, out var parsedType))
        {
            all = all.Where(q => q.Type == parsedType);
        }

        filteredQRCodes = all.Select(q => new QRCodeEntryWithSelection(q)).ToList();
        selectedIds.Clear();
    }

    private void OnSelectionChanged(Guid id, bool isSelected)
    {
        if (isSelected)
            selectedIds.Add(id);
        else
            selectedIds.Remove(id);
    }

    private void OnCheckboxChanged(QRCodeEntryWithSelection qr, ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value!;
        qr.IsSelected = isChecked;
        OnSelectionChanged(qr.Id, isChecked);
    }

    private async Task DeleteQRCode(Guid id)
    {
        await QRService.DeleteQRCode(id);
        filteredQRCodes.RemoveAll(q => q.Id == id);
        selectedIds.Remove(id);
    }

    private async Task DeleteSelectedQRCodes()
    {
        foreach (var id in selectedIds.ToList())
        {
            await QRService.DeleteQRCode(id);
            filteredQRCodes.RemoveAll(q => q.Id == id);
        }
        selectedIds.Clear();
    }

    private async Task DownloadQRCode(QRCodeEntryWithSelection qr)
    {
        var bytes = Convert.FromBase64String(qr.ImageBase64);
        var fileName = $"{qr.Name}_{qr.Id}.png";
        var base64 = Convert.ToBase64String(bytes);
        var dataUrl = $"data:image/png;base64,{base64}";

        await JS.InvokeVoidAsync("downloadFile", fileName, dataUrl);
    }

    class QRCodeEntryWithSelection : QRCodeEntry
    {
        public QRCodeEntryWithSelection(QRCodeEntry entry)
        {
            this.Id = entry.Id;
            this.Name = entry.Name;
            this.Type = entry.Type;
            this.ImageBase64 = entry.ImageBase64;
        }

        public bool IsSelected { get; set; }
    }
} *@


@page "/view"
@using qr_website.Services
@using qr_website.Models
@inject QRCodeService QRService
@inject ThemeService ThemeService
@inject IJSRuntime JS

<h3>Stored QR Codes</h3>

<div class="row mb-3">
    <div class="col-md-6">
        <input placeholder="Search by name or ID"
               @bind="searchTerm"
               @bind:event="oninput"
               class="form-control"
               style="background-color: var(--card-bg); color: var(--text-color); border-color: var(--border-color);" />
    </div>
    <div class="col-md-4">
        <select class="form-select"
                @onchange="OnTypeChanged"
                style="background-color: var(--card-bg); color: var(--text-color); border-color: var(--border-color);">
            <option value="">All Categories</option>
            @foreach (var type in Enum.GetValues<QRCodeType>())
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-secondary w-100" @onclick="Search"
                style="background-color: var(--card-bg); color: var(--text-color); border-color: var(--border-color);">
            Search
        </button>
    </div>
</div>

@if (filteredQRCodes.Any())
{
    <div class="mb-3">
        <button class="btn btn-danger" @onclick="DeleteSelectedQRCodes" disabled="@(!selectedIds.Any())">
            Delete Selected
        </button>
    </div>

    <ul class="list-group" style="background-color: var(--card-bg); color: var(--text-color);">
        @foreach (var qr in filteredQRCodes)
        {
            <li class="list-group-item d-flex justify-content-between align-items-start"
                style="background-color: var(--card-bg); color: var(--text-color); border-color: var(--border-color);">
                <div class="ms-2 me-auto">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox"
                               checked="@qr.IsSelected"
                               @onchange="e => OnCheckboxChanged(qr, e)" />
                        <label class="form-check-label">
                            <strong>@qr.Name</strong> (ID: @qr.Id)<br />
                            <em>Category:</em> @qr.Type
                        </label>
                    </div>
                    <img src="data:image/png;base64,@qr.ImageBase64" style="width: 100px;" />
                </div>
                <div class="d-flex flex-column align-items-end">
                    <button class="btn btn-sm btn-success mb-1" @onclick="() => DownloadQRCode(qr)">Download</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteQRCode(qr.Id)">Delete</button>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p style="color: var(--text-color);">No QR codes found.</p>
}

@code {
    private string searchTerm = "";
    private string? selectedType = "";
    private List<QRCodeEntryWithSelection> filteredQRCodes = new();
    private HashSet<Guid> selectedIds = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadQRCodes();
    }

    private async Task LoadQRCodes()
    {
        var all = await QRService.GetAll();
        filteredQRCodes = all.Select(q => new QRCodeEntryWithSelection(q)).ToList();
    }

    private async Task Search()
    {
        var all = await QRService.GetAll();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            all = all.Where(q =>
                q.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                q.Id.ToString().Contains(searchTerm));
        }

        if (!string.IsNullOrWhiteSpace(selectedType) &&
            Enum.TryParse<QRCodeType>(selectedType, out var parsedType))
        {
            all = all.Where(q => q.Type == parsedType);
        }

        filteredQRCodes = all.Select(q => new QRCodeEntryWithSelection(q)).ToList();
        selectedIds.Clear();
    }

    private async Task OnTypeChanged(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString();
        await Search();
    }

    private void OnSelectionChanged(Guid id, bool isSelected)
    {
        if (isSelected)
            selectedIds.Add(id);
        else
            selectedIds.Remove(id);
    }

    private void OnCheckboxChanged(QRCodeEntryWithSelection qr, ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value!;
        qr.IsSelected = isChecked;
        OnSelectionChanged(qr.Id, isChecked);
    }

    private async Task DeleteQRCode(Guid id)
    {
        await QRService.DeleteQRCode(id);
        filteredQRCodes.RemoveAll(q => q.Id == id);
        selectedIds.Remove(id);
    }

    private async Task DeleteSelectedQRCodes()
    {
        foreach (var id in selectedIds.ToList())
        {
            await QRService.DeleteQRCode(id);
            filteredQRCodes.RemoveAll(q => q.Id == id);
        }
        selectedIds.Clear();
    }

    private async Task DownloadQRCode(QRCodeEntryWithSelection qr)
    {
        var bytes = Convert.FromBase64String(qr.ImageBase64);
        var fileName = $"{qr.Name}_{qr.Id}.png";
        var base64 = Convert.ToBase64String(bytes);
        var dataUrl = $"data:image/png;base64,{base64}";

        await JS.InvokeVoidAsync("downloadFile", fileName, dataUrl);
    }

    class QRCodeEntryWithSelection : QRCodeEntry
    {
        public QRCodeEntryWithSelection(QRCodeEntry entry)
        {
            this.Id = entry.Id;
            this.Name = entry.Name;
            this.Type = entry.Type;
            this.ImageBase64 = entry.ImageBase64;
        }

        public bool IsSelected { get; set; }
    }
}
